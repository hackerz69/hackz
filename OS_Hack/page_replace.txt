Q.. Write a program to implement FIFO Page Replacement Algorithm.


#include <stdio.h>
#include <stdlib.h>

void fifoPageReplacement(int frames[], int frameCount, int pages[], int pageCount) {
    int i, j, k, pageFaults = 0, pageHits = 0;
    int index = 0;

    for (i = 0; i < frameCount; i++) {
        frames[i] = -1;
    }

    printf("\nPage Reference String\tFrames\t\tPage Hit/Fault\n");

    for (i = 0; i < pageCount; i++) {
        int page = pages[i];
        int found = 0;

        for (j = 0; j < frameCount; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (found) {
            pageHits++;
            printf("%d\t\t\t", page);
            for (k = 0; k < frameCount; k++) {
                if (frames[k] != -1) {
                    printf("%d ", frames[k]);
                }
            }
            printf("\t\t\tHit\n");
        } else {
            pageFaults++;
            frames[index] = page;
            index = (index + 1) % frameCount;

            printf("%d\t\t\t", page);
            for (k = 0; k < frameCount; k++) {
                if (frames[k] != -1) {
                    printf("%d ", frames[k]);
                }
            }
            printf("\t\t\tFault\n");
        }
    }

    printf("\nTotal Page Hits: %d\n", pageHits);
    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int frameCount, pageCount, i;

    printf("Enter the number of frames: ");
    scanf("%d", &frameCount);

    printf("Enter the number of pages: ");
    scanf("%d", &pageCount);

    int* frames = (int*)malloc(frameCount * sizeof(int));
    int* pages = (int*)malloc(pageCount * sizeof(int));

    printf("Enter the page reference string:\n");
    for (i = 0; i < pageCount; i++) {
        scanf("%d", &pages[i]);
    }

    fifoPageReplacement(frames, frameCount, pages, pageCount);

    return 0;
}


•	Write a program to implement LRU Page Replacement Algorithm.
#include <stdio.h>
#include <stdlib.h> 

int find_page(int frames[], int num_frames, int page) {
    for (int i = 0; i < num_frames; i++) {
        if (frames[i] == page) {
            return i;
        }
    }
    return -1; 
}

int find_lru(int last_used[], int num_frames) {
    int lru_index = 0;
    for (int i = 1; i < num_frames; i++) {
        if (last_used[i] < last_used[lru_index]) {
            lru_index = i;
        }
    }
    return lru_index;
}

void lru_page_replacement(int pages[], int num_pages, int num_frames) {
    int* frames = (int*)malloc(num_frames * sizeof(int));       
    int* last_used = (int*)malloc(num_frames * sizeof(int));    
    int page_faults = 0;                                       
    int page_hits = 0;                                          
    int time = 0;                                               

    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1; 
        last_used[i] = 0;
    }

    printf("Page Reference\tFrames\t\tPage Fault/Hit\n");
    printf("--------------------------------------------------\n");

    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int index = find_page(frames, num_frames, page);

        if (index == -1) { 
            page_faults++;
            int replace_index;

            
            if (page_faults <= num_frames) {
                replace_index = page_faults - 1; 
            } else {
                replace_index = find_lru(last_used, num_frames);
            }

            frames[replace_index] = page;       
            last_used[replace_index] = time;   

            
            printf("%d\t\t", page);
            for (int j = 0; j < num_frames; j++) {
                if (frames[j] != -1)
                    printf("%d ", frames[j]);
                else
                    printf("- ");
            }
            printf("\t\tPage Fault\n");

        } else {
            page_hits++;
            last_used[index] = time; 
            
            printf("%d\t\t", page);
            for (int j = 0; j < num_frames; j++) {
                if (frames[j] != -1)
                    printf("%d ", frames[j]);
                else
                    printf("- ");
            }
            printf("\t\tPage Hit\n");
        }

        time++; 
    }

    printf("--------------------------------------------------\n");
    printf("Total Frames: %d\n", num_frames);
    printf("Total Page Faults: %d\n", page_faults);
    printf("Total Page Hits: %d\n", page_hits);

    
    free(frames);
    free(last_used);
}

int main() {
    int num_frames, num_pages;

    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);

    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    int* pages = (int*)malloc(num_pages * sizeof(int)); 

    printf("Enter the page reference string: ");
    for (int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    lru_page_replacement(pages, num_pages, num_frames);

    free(pages);

    return 0;
}

•	Write a program to implement Optimal Page Replacement Algorithm.
#include <stdio.h>
#include <stdlib.h>

void optimalPageReplacement(int pages[], int n, int frames) {
    // Dynamically allocate memory for frame array
    int *frame = (int *)malloc(frames * sizeof(int));
    int count = 0, pageFaults = 0;

    // Initialize the frame array to -1 (empty)
    for (int i = 0; i < frames; i++) {
        frame[i] = -1;
    }

    printf("Page Reference String and Frame Status:\n");

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frames; j++) {
            if (frame[j] == page) {
                found = 1; // Page hit
                break;
            }
        }

        if (!found) { // Page fault
            if (count < frames) {
                frame[count] = page; // Fill the empty frames first
                count++;
            } else {
                // Find the page to replace
                int farthest = -1, replaceIdx = -1;
                for (int j = 0; j < frames; j++) {
                    int nextUse = -1;
                    for (int k = i + 1; k < n; k++) {
                        if (frame[j] == pages[k]) {
                            nextUse = k;
                            break;
                        }
                    }

                    if (nextUse == -1) { // Page not used in future
                        replaceIdx = j;
                        break;
                    } else if (nextUse > farthest) { // Farther use
                        farthest = nextUse;
                        replaceIdx = j;
                    }
                }
                frame[replaceIdx] = page;
            }
            pageFaults++;
        }

        // Print the current frame status
        printf("%2d -> ", page);
        for (int j = 0; j < frames; j++) {
            if (frame[j] == -1)
                printf(" - ");
            else
                printf("%2d ", frame[j]);
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);

    // Free the dynamically allocated memory
    free(frame);
}

int main() {
    int n, frames;

    // Get the number of pages and frames from the user
    printf("Enter the number of pages: ");
    scanf("%d", &n);
    int *pages = (int *)malloc(n * sizeof(int));

    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        printf("Page %d: ", i + 1);
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    // Call the Optimal Page Replacement Algorithm
    optimalPageReplacement(pages, n, frames);

    // Free the dynamically allocated memory
    free(pages);

    return 0;
}

•	Write a program to implement Clock Page Replacement Algorithm.

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Function for Least Recently Used (LRU) Page Replacement
int leastRecentlyUsed(int pages[], int n, int frames) {
    int *frame = (int *)malloc(frames * sizeof(int));
    int *lastUsed = (int *)malloc(frames * sizeof(int));
    int pageFaults = 0;

    for (int i = 0; i < frames; i++) {
        frame[i] = -1;
        lastUsed[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frames; j++) {
            if (frame[j] == page) {
                found = 1;
                lastUsed[j] = i; // Update last used time
                break;
            }
        }

        if (!found) { // Page fault
            int replaceIdx = -1;
            int leastRecentlyUsedTime = INT_MAX;

            // Find the least recently used frame
            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) { // Empty frame
                    replaceIdx = j;
                    break;
                } else if (lastUsed[j] < leastRecentlyUsedTime) {
                    leastRecentlyUsedTime = lastUsed[j];
                    replaceIdx = j;
                }
            }

            frame[replaceIdx] = page;
            lastUsed[replaceIdx] = i;
            pageFaults++;
        }
    }

    free(frame);
    free(lastUsed);

    return pageFaults;
}

// Function for Second Chance (Clock) Page Replacement
int secondChance(int pages[], int n, int frames) {
    int *frame = (int *)malloc(frames * sizeof(int));
    int *referenceBit = (int *)malloc(frames * sizeof(int));
    int pageFaults = 0, pointer = 0;

    for (int i = 0; i < frames; i++) {
        frame[i] = -1;
        referenceBit[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frames; j++) {
            if (frame[j] == page) {
                found = 1;
                referenceBit[j] = 1; // Set the reference bit
                break;
            }
        }

        if (!found) { // Page fault
            while (referenceBit[pointer] == 1) {
                referenceBit[pointer] = 0; // Reset reference bit
                pointer = (pointer + 1) % frames; // Move to the next frame
            }

            frame[pointer] = page;
            referenceBit[pointer] = 1;
            pointer = (pointer + 1) % frames; // Move pointer to the next frame
            pageFaults++;
        }
    }

    free(frame);
    free(referenceBit);

    return pageFaults;
}

int main() {
    int n, frames;

    // Get the number of pages and the page reference string from the user
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    int *pages = (int *)malloc(n * sizeof(int));
    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        printf("Page %d: ", i + 1);
        scanf("%d", &pages[i]);
    }

    // Get the number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    // Least Recently Used (LRU)
    int lruFaults = leastRecentlyUsed(pages, n, frames);
    printf("\nTotal Page Faults using LRU: %d\n", lruFaults);

    // Second Chance (Clock)
    int secondChanceFaults = secondChance(pages, n, frames);
    printf("Total Page Faults using Second Chance: %d\n", secondChanceFaults);

    // Free the dynamically allocated memory
    free(pages);

    return 0;
}

