1.SSTF

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

void SSTF(int requests[], int n, int head) {
    int total_seek_time = 0, completed = 0, min_distance, current, index;
     int *visited = (int *)malloc(n * sizeof(int));
    
    // Initialize the visited array
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }

    printf("\nSSTF Disk Scheduling\n");
    printf("Seek Sequence: %d", head);

    while (completed < n) {
        min_distance = INT_MAX; // Initialize to a large value
        index = -1;

        // Find the request with the minimum seek time
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int distance = abs(requests[i] - head);
                if (distance < min_distance) {
                    min_distance = distance;
                    index = i;
                }
            }
        }

        // Process the request with the minimum seek time
        visited[index] = 1;
        total_seek_time += min_distance;
        head = requests[index];
        printf(" -> %d", head);
        completed++;
    }

    printf("\nTotal Seek Time: %d\n", total_seek_time);
    printf("Average Seek Time: %.2f\n", (float)total_seek_time / n);
}

int main() {
    int n, head;

    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    // Dynamically allocate memory for the requests array
    int *requests = (int *)malloc(n * sizeof(int));
    if (requests == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    printf("Enter the disk requests (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    SSTF(requests, n, head);

    // Free the allocated memory
    free(requests);

    return 0;
}


2. SCAN


#include <stdio.h>
#include <stdlib.h>

void SCAN(int requests[], int n, int head, int disk_size, int direction) {
    int total_movement = 0;
    int i, j;
    int *sorted_requests = (int *)malloc((n + 1) * sizeof(int)); // Dynamic memory allocation
    int sorted_index = 0;

    // Copy the requests and include the head position for sorting
    for (i = 0; i < n; i++) {
        sorted_requests[i] = requests[i];
    }
    sorted_requests[n] = head; // Add head position to the list
    n++; // Increment size due to added head

    // Sort the requests
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (sorted_requests[i] > sorted_requests[j]) {
                int temp = sorted_requests[i];
                sorted_requests[i] = sorted_requests[j];
                sorted_requests[j] = temp;
            }
        }
    }

    // Find the position of the head in the sorted list
    for (i = 0; i < n; i++) {
        if (sorted_requests[i] == head) {
            sorted_index = i;
            break;
        }
    }

    printf("\nSCAN Disk Scheduling (Direction: %s):\n", direction == 1 ? "Up" : "Down");
    printf("Order of access: ");

    // Move in the specified direction
    if (direction == 1) { // Upward direction
        for (i = sorted_index; i < n; i++) {
            printf("%d ", sorted_requests[i]);
            if (i > sorted_index) {
                total_movement += abs(sorted_requests[i] - sorted_requests[i - 1]);
            }
        }
        if (sorted_requests[n - 1] != disk_size - 1) { // Move to the end of the disk
            total_movement += abs(disk_size - 1 - sorted_requests[n - 1]);
            printf("%d ", disk_size - 1);
        }
        for (i = sorted_index - 1; i >= 0; i--) { // Move downward
            printf("%d ", sorted_requests[i]);
            total_movement += abs(sorted_requests[i] - sorted_requests[i + 1]);
        }
    } else { // Downward direction
        for (i = sorted_index; i >= 0; i--) {
            printf("%d ", sorted_requests[i]);
            if (i < sorted_index) {
                total_movement += abs(sorted_requests[i] - sorted_requests[i + 1]);
            }
        }
        if (sorted_requests[0] != 0) { // Move to the start of the disk
            total_movement += abs(sorted_requests[0]);
            printf("0 ");
        }
        for (i = sorted_index + 1; i < n; i++) { // Move upward
            printf("%d ", sorted_requests[i]);
            total_movement += abs(sorted_requests[i] - sorted_requests[i - 1]);
        }
    }

    printf("\nTotal head movement: %d\n", total_movement);

    // Free dynamically allocated memory
    free(sorted_requests);
}

int main() {
    int n, head, disk_size, direction;

    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int *requests = (int *)malloc(n * sizeof(int)); // Dynamic memory allocation
    printf("Enter the requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter initial head position: ");
    scanf("%d", &head);

    printf("Enter disk size: ");
    scanf("%d", &disk_size);

    printf("Enter direction for SCAN (1 for up, 0 for down): ");
    scanf("%d", &direction);

    SCAN(requests, n, head, disk_size, direction);

    // Free dynamically allocated memory
    free(requests);

    return 0;
}






3.  C-SCAN

#include <stdio.h>
#include <stdlib.h>

void CSCAN(int requests[], int n, int head, int disk_size) {
    int total_movement = 0;
    int i, j;
    int *sorted_requests = (int *)malloc((n + 3) * sizeof(int)); // Dynamic memory allocation
    int sorted_index = 0;

    // Copy the requests and include the head position and disk boundaries
    for (i = 0; i < n; i++) {
        sorted_requests[i] = requests[i];
    }
    sorted_requests[n] = head;       // Add head position
    sorted_requests[n + 1] = 0;      // Add boundary at 0
    sorted_requests[n + 2] = disk_size - 1; // Add boundary at max disk size
    n += 3; // Increment size for the added values

    // Sort the requests
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (sorted_requests[i] > sorted_requests[j]) {
                int temp = sorted_requests[i];
                sorted_requests[i] = sorted_requests[j];
                sorted_requests[j] = temp;
            }
        }
    }

    // Find the position of the head in the sorted list
    for (i = 0; i < n; i++) {
        if (sorted_requests[i] == head) {
            sorted_index = i;
            break;
        }
    }

    printf("\nC-SCAN Disk Scheduling:\n");
    printf("Order of access: ");

    // Move upward and wrap around
    for (i = sorted_index; i < n; i++) {
        printf("%d ", sorted_requests[i]);
        if (i > sorted_index) {
            total_movement += abs(sorted_requests[i] - sorted_requests[i - 1]);
        }
    }
    if (sorted_requests[n - 1] != disk_size - 1) {
        total_movement += abs(disk_size - 1 - sorted_requests[n - 1]);
        printf("%d ", disk_size - 1);
    }
    total_movement += disk_size - 1; // Wrap around to 0
    printf("0 ");
    for (i = 1; i < sorted_index; i++) { // Continue upward from 0
        printf("%d ", sorted_requests[i]);
        total_movement += abs(sorted_requests[i] - sorted_requests[i - 1]);
    }

    printf("\nTotal head movement: %d\n", total_movement);

    // Free dynamically allocated memory
    free(sorted_requests);
}

int main() {
    int n, head, disk_size;

    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int *requests = (int *)malloc(n * sizeof(int)); // Dynamic memory allocation
    printf("Enter the requests: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter initial head position: ");
    scanf("%d", &head);

    printf("Enter disk size: ");
    scanf("%d", &disk_size);

    CSCAN(requests, n, head, disk_size);

    // Free dynamically allocated memory
    free(requests);

    return 0;
}
