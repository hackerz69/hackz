â€¢	OS Phase 1:

#include <stdio.h> 
#include <stdlib.h> 
FILE *ptr , *wptr ; 
int tempi = 0 , tempj = 0 , flag = 0 , C = 0 , IC = 00 , SI = 00 , ttl = 0 ; 
char M[100][4] , IR[4] , R[4] , buffer[40] , ttl_array[4] ;  
void init() 
{ 
    int i = 0 , j = 0 ; 
    for(i=8,j=0;i<12 && j<4;i++,j++) 
        ttl_array[j] = buffer[i]; 
    ttl = atoi(ttl_array);//atoi : covrrt char numeric string to a integer 
} 
void reset() 
{   
    int i = 0 , j = 0 ; 
    C = 00 , IC = 00 , ttl = 0 , tempi = 0 , tempj = 0 , flag = 0; 
    for(i=0;i<4;i++) 
    { 
        IR[i] = '\0'; 
        R[i] = '\0'; 
        ttl_array[i] = '\0'; 
    } 
    for(i=0;i<100;i++) 
    { 
        for(j=0;j<4;j++) 
            M[i][j] = '\0'; 
    } 
    printf("CPU Reseted Successfully!\n");    
    init(); 
} 
void loadbuffer() 
{ 
    int i ; 
    char ch ; 
    for(i=0;i<40;i++) 
        buffer[i] = '\0';  
    i = 0 ; 
    while((ch = getc(ptr)) != '\n') 
    { 
        if(i == 40) 
            break; 
        buffer[i] = ch ; 
        i++; 
    } 
} 
int check() 
{ 
    if(buffer[0] == '$' && buffer[1] == 'A') 
        return 1;//amj 
    else if(buffer[0] == '$' && buffer[1] == 'D') 
        return 2;//data 
    else if(buffer[0] == '$' && buffer[1] == 'E') 
        return 3;//end 
    else  
        return 4;//code 
} 
void terminate() 
{ 
    printf("\nJob Terminated !"); 
} 
void load() 
{ 
    if(tempj==4) 
        tempj = 0; 
    int i = tempi , j = tempj , k = 0 ; 
    if(i < 10 && j < 4 && flag == 0) 
    { 
        //block 0 reserved for code 
        for(i=tempi;i<10;i++) 
        { 
            for(j=tempj;j<4;j++) 
            { 
                M[i][j] = buffer[k]; 
                k++; 
            }   
        } 
    } 
    if(i >= 10 && i < 100 && j < 4) 
    { 
        //block 1 to block 9 
        for(i=tempi;i<100;i++) 
        { 
            for(j=tempj;j<4;j++) 
            { 
                if(k==40) 
                    break; 
                M[i][j] = buffer[k]; 
                k++; 
            }   
        } 
    }   
    tempi = i ; 
    tempj = j ; 
} 
void GD(int operand) 
{ 
    loadbuffer(); 
    int i = operand , j =  0 , k = 0 ; 
    for(i = operand ; i < (operand+10) ; i++) 
    { 
        for(j=0;j<4;j++) 
        { 
            if(k==40) 
                break; 
            M[i][j] = buffer[k]; 
            k++; 
        } 
    } 
} 
void PD(int operand) 
{ 
    int i = operand , j = 0  ; 
    for(i = operand ; i < (operand+10) ; i++) 
    { 
        for(j=0;j<4;j++) 
        { 
            if(M[i][j] != '\0') 
                fprintf(wptr,"%c",M[i][j]); 
            else 
                fprintf(wptr," "); 
        } 
    } 
    fprintf(wptr,"\n"); 
} 
void H() 
{ 
    fprintf(wptr,"\n\n"); 
} 
void LR(int operand) 
{ 
    int i , j = 0 ; 
    i = operand ; 
    for(j = 0 ; j < 4 ; j++) 
        R[j] = M[i][j];  
} 
void SR(int operand) 
{ 
    int i , j ; 
    i = operand; 
    for(j=0;j<4;j++) 
        M[i][j] = R[j]; 
} 
void CR(int operand) 
{ 
    int i = operand , j = 0 , counter = 0; 
    for(j = 0 ; j < 4 ; j++) 
    { 
        if(R[j] == M[i][j]) 
            counter = counter+1; 
    } 
    if(counter == 4) 
        C = 01;   
} 
void BT(int operand) 
{ 
    if(C==01) 
        IC = operand - 1 ;   
    else 
        IC = IC ; 
} 
void MOS(int op) 
{ 
    switch (SI)   
    { 
        case 1:GD(op); 
        break; 
        case 2:PD(op); 
        break; 
        case 3:H(); 
        break; 
    } 
} 
void execute() 
{ 
    int i , j , k = 0 , op = 0; ; 
    char operand[3] ; 
    while(IC < ttl) 
    { 
        for(i=IC;i<IC+1;i++) 
        { 
            for(j=0;j<4;j++) 
            { 
                IR[k] = M[i][j]; 
                k++; 
            } 
        } 
        for(i=2,j=0;i<4;i++,j++) 
            operand[j] = IR[i]; 
        operand[2] = '\0'; 
        op = atoi(operand); 
        if(IR[0] == 'G' && IR[1] == 'D') 
        {   SI = 1 ; MOS(op); }  
        else if(IR[0] == 'P' && IR[1] == 'D') 
        {   SI = 2 ; MOS(op); }  
        else if(IR[0] == 'L' && IR[1] == 'R') 
            LR(op); 
        else if(IR[0] == 'S' && IR[1] == 'R') 
            SR(op); 
        else if(IR[0] == 'C' && IR[1] == 'R') 
            CR(op); 
        else if(IR[0] == 'B' && IR[1] == 'T') 
            BT(op); 
        else if(IR[0] == 'H') 
        {   SI = 3 ; MOS(op); }  
        IC = IC + 01; 
        k = 0 ; 
    } 
} 
int main() 
{ 
    int temp = 0 ; 
    ptr = fopen("input.txt","r"); 
    wptr = fopen("output.txt","w"); 
    while(!feof(ptr)) 
    { 
        loadbuffer(); 
        temp = check(); 
        if(temp == 1) 
            reset(); 
        else if(temp == 2) 
        { 
            flag = 1; 
            execute(); 
        } 
        else if(temp == 3) 
            terminate(); 
        else if(temp == 4) 
            load();          
    } 
    printf("\nAll jobs executed!"); 
    fclose(ptr); 
    fclose(wptr); 
    return 0; 
}

Input.txt

input.txt 
$AMJ020200250005 
GD20PD20LR20SR30SR31PD30SR40SR41SR42PD40 
SR50SR51PD50SR60PD60H   
$DTA 
* 
$END0202 
$AMJ030200100002 
GD20GD30LR31SR22LR32SR23PD20SR40PD40H 
$DTA 
CAT CAN 
    EAT RAT 
$END0302 
$AMJ010200080002 
GD20LR26CR20BT06GD30PD30PD20H 
$DTA 
RAM  IS OLDER THAN  SHRIRAM  
NOT IN EXISTANCE 
$END0102 
$AMJ040100120004 
GD20PD20GD30PD30GD40GD50LR20CR30BT10PD40 
PD50H 
$DTA 
ABCD 
ABCD 
DO NOT 
MATCH 
$END0401 
$AMJ000100050002 
GD10PD10GD20PD20H 
$DTA 
HELLO 
This was my complete OS phase 1  
$END
