•	Write a C program to implement the First Come First Serve (Non-Pre-emptive) Algorithm.

                   #include <stdio.h>

int main() 
{
    int n, i;
    int arrivalTime[20], burstTime[20], waitingTime[20], turnaroundTime[20], completionTime[20];
    int totalWaitingTime = 0, totalTurnaroundTime = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) 
    {
        printf("Enter Arrival Time and Burst Time for Process %d: ", i + 1);
        scanf("%d%d", &arrivalTime[i], &burstTime[i]);
    }

    completionTime[0] = arrivalTime[0] + burstTime[0];
    for (i = 1; i < n; i++)
  {
        if (completionTime[i - 1] < arrivalTime[i])
       {
            completionTime[i] = arrivalTime[i] + burstTime[i];
        } else
        {
            completionTime[i] = completionTime[i - 1] + burstTime[i];
        }
    }



    for (i = 0; i < n; i++) 
    {
        turnaroundTime[i] = completionTime[i] - arrivalTime[i];
    }

    for (i = 0; i < n; i++)
    {
        waitingTime[i] = turnaroundTime[i] - burstTime[i];
    }

    printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++)
    {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, arrivalTime[i], burstTime[i], waitingTime[i], turnaroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f", (float)totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);

    return 0;
}

•	Draw the Gantt charts and compute the finish time, turnaround time and waiting time for the following algorithms:

 a. Priority scheduling. 
 b. Shortest Job First (Non-Pre-emptive)

#include <stdio.h> 
#include <stdlib.h> 
#define MAX_PROCESSES 10 
typedef struct { 
    int id;        
    int arrival_time;  
    int priority; 
    int burst_time;   
    int finish_time;  
    int turnaround_time;  
    int waiting_time;  
    int remaining_time;  
} Process; 
 
int compare_priority(const void* a, const void* b) { 
    Process* process_a = (Process*)a; 
    Process* process_b = (Process*)b; 
    return process_a->priority - process_b->priority; 
} 
 
int compare_burst_time(const void* a, const void* b) { 
    Process* process_a = (Process*)a; 
    Process* process_b = (Process*)b; 
    return process_a->burst_time - process_b->burst_time; 
} 
 
void priority_scheduling(Process processes[], int n) { 
    qsort(processes, n, sizeof(Process), compare_priority); 
 
    int current_time = 0; 
    for (int i = 0; i < n; i++) { 
         
        if (current_time < processes[i].arrival_time) { 
            current_time = processes[i].arrival_time; 
        } 
 
        processes[i].finish_time = current_time + processes[i].burst_time; 
        processes[i].turnaround_time = processes[i].finish_time - processes[i].arrival_time; 
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time; 
        current_time = processes[i].finish_time; 
    } 
} 
 
void sjf_scheduling(Process processes[], int n) { 
    qsort(processes, n, sizeof(Process), compare_burst_time); 
 
    int current_time = 0; 
    for (int i = 0; i < n; i++) { 
         
        if (current_time < processes[i].arrival_time) { 
            current_time = processes[i].arrival_time; 
        } 
 
        processes[i].finish_time = current_time + processes[i].burst_time; 
        processes[i].turnaround_time = processes[i].finish_time - processes[i].arrival_time; 
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time; 
        current_time = processes[i].finish_time; 
    } 
} 
 
void display_results(Process processes[], int n) { 
    printf("Process ID\tArrival Time\tBurst Time\tFinish Time\tTurnaround Time\tWaiting 
Time\n"); 
    for (int i = 0; i < n; i++) { 
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, 
                processes[i].arrival_time, processes[i].burst_time, 
                processes[i].finish_time, processes[i].turnaround_time, 
                processes[i].waiting_time); 
    } 
} 
 
int main() { 
    int n; 
 
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
 
    Process processes[MAX_PROCESSES]; 
 
    for (int i = 0; i < n; i++) { 
        printf("Enter Process %d details:\n", i + 1); 
        printf("Arrival Time: "); 
        scanf("%d", &processes[i].arrival_time); 
        printf("Burst Time: "); 
        scanf("%d", &processes[i].burst_time); 
        processes[i].id = i + 1;  
        processes[i].priority = 0;  
    } 
 
    printf("\nPriority Scheduling Results:\n"); 
    priority_scheduling(processes, n); 
    display_results(processes, n); 
 
    printf("\nSJF Scheduling Results:\n"); 
    sjf_scheduling(processes, n); 
    display_results(processes, n); 
 
    return 0; 
}

Draw the Gantt charts and compute the finish time, turnaround time and waiting time 
for the following algorithms:  
a.	Round- Robin  
#include <stdio.h> 
 
struct process 
{ 
int Pid; 
int AT; 
int BT; 
int CT; 
int TAT; 
int WT; 
int RT; 
int remaining_BT; 
}; 
 
void Sortarray(struct process ps[], int n) 
{ 
struct process temp; 
for (int i = 0; i < n; i++) 
{ 
for (int j = i + 1; j < n; j++) 
{ 
if (ps[i].AT > ps[j].AT) 
{ 
temp = ps[i]; 
ps[i] = ps[j]; 
ps[j] = temp; 
} 
} 
} 
} 
void roundRobin(struct process ps[], int n, int timeQuantum) 
{ 
int time = 0; 
int completedProcesses = 0; 
int total_TAT = 0, total_WT = 0, total_RT = 0; 
int total_idle_time = 0; 
 
for (int i = 0; i < n; i++) 
{ 
ps[i].remaining_BT = ps[i].BT; 
ps[i].RT = -1; 
} 
 
while (completedProcesses < n) 
{ 
int idle = 1; 
 
for (int i = 0; i < n; i++) 
{ 
if (ps[i].remaining_BT > 0 && ps[i].AT <= time) 
{ 
idle = 0; 
 
if (ps[i].RT == -1) 
{ 
ps[i].RT = time - ps[i].AT; 
} 
 
if (ps[i].remaining_BT > timeQuantum) 
{ 
 	time += timeQuantum; 
ps[i].remaining_BT -= timeQuantum; 
 
} 
Else 
{ 
 
 time += ps[i].remaining_BT; 
ps[i].remaining_BT = 0; 
ps[i].CT = time; 
ps[i].TAT = ps[i].CT - ps[i].AT; 
ps[i].WT = ps[i].TAT - ps[i].BT; 
 
total_TAT += ps[i]. TAT; 
total_WT += ps[i]. WT; 
total_RT += ps[i]. RT; 
completedProcesses++; 
 
}  
} 
} 
 
if (idle) 
{ 
time++; 
total_idle_time++; 
} 
} 
 
printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\tRT\n"); 
for (int i = 0; i < n; i++) 
{ 
printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n", ps[i].Pid, ps[i].AT, ps[i].BT, 
ps[i].CT, ps[i].TAT, ps[i].WT, ps[i].RT); 
} 
 
printf("\nAverage Turnaround Time: %.2f", (float)total_TAT / n); 
printf("\nAverage Waiting Time: %.2f", (float)total_WT / n); 
printf("\nAverage Response Time: %.2f", (float)total_RT / n); 
 
int schedule_length = ps[n - 1].CT; 
printf("\nThroughput = %.2f", (float)n / schedule_length); 
 
float cpu_utilization = ((float)(schedule_length - total_idle_time) / 
schedule_length) * 100; 
printf("\nCPU Utilization = %.2f%%\n", cpu_utilization); 
} 
 
int main() 
{ 
 
 
int n, timeQuantum; 
 
printf("Enter the number of processes: "); 
scanf("%d", &n); 
 
if (n <= 0) 
{ 
printf("Number of processes must be positive!\n"); 
return 1; 
} 
struct process ps[10]; 
 
for (int i = 0; i < n; i++) 
{ 
ps[i].Pid = i + 1; 
printf("Enter Arrival Time of Process %d: ", i + 1); 
scanf("%d", &ps[i].AT); 
 
if (ps[i].AT < 0) 
{ 
printf("Arrival Time cannot be negative!\n"); 
return 1; 
} 
 
printf("Enter Burst Time of Process %d: ", i + 1); 
scanf("%d", &ps[i].BT); 
 
if (ps[i].BT <= 0) 
{ 
printf("Burst Time must be positive!\n"); 
return 1; 
} 
} 
 
printf("Enter the Time Quantum: "); 
scanf("%d", &timeQuantum); 
 
if (timeQuantum <= 0) 
{ 
printf("Time Quantum must be positive!\n"); 
return 1; 
} 
 
Sortarray(ps, n); 
roundRobin(ps, n, timeQuantum); 
 
return 0; 
}



•	Write a C program to implement the SRTF Scheduling Algorithm.

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

void srtfPageReplacement(int pages[], int n, int frames) {
    int *frame = (int *)malloc(frames * sizeof(int));  // Array for frames
    int *nextUse = (int *)malloc(frames * sizeof(int));  // Next usage time for each frame
    int pageFaults = 0;

    // Initialize frames and nextUse array
    for (int i = 0; i < frames; i++) {
        frame[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if the page is already in the frame
        for (int j = 0; j < frames; j++) {
            if (frame[j] == page) {
                found = 1;  // Page hit
                break;
            }
        }

        if (!found) {  // Page fault
            // Find the page with the farthest next use to replace
            int replaceIdx = -1;
            int farthest = -1;

            for (int j = 0; j < frames; j++) {
                int nextOccurrence = -1;

                // Find the next occurrence of the page in the future reference string
                for (int k = i + 1; k < n; k++) {
                    if (pages[k] == frame[j]) {
                        nextOccurrence = k;
                        break;
                    }
                }

                if (nextOccurrence == -1) {  // Page not used again in the future
                    replaceIdx = j;
                    break;
                }

                if (nextOccurrence > farthest) {  // Find the page with the farthest next use
                    farthest = nextOccurrence;
                    replaceIdx = j;
                }
            }

            // Replace the page
            frame[replaceIdx] = page;
            pageFaults++;
        }

        // Print the current page in the frame
        printf("Page Reference: %d -> Frames: ", page);
        for (int j = 0; j < frames; j++) {
            if (frame[j] == -1)
                printf(" - ");
            else
                printf("%d ", frame[j]);
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);

    // Free the dynamically allocated memory
    free(frame);
    free(nextUse);
}

int main() {
    int n, frames;

    // Get the number of pages from the user
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    int *pages = (int *)malloc(n * sizeof(int));

    // Get the page reference string from the user
    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        printf("Page %d: ", i + 1);
        scanf("%d", &pages[i]);
    }

    // Get the number of frames from the user
    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    // Call the SRTF-like page replacement function
    srtfPageReplacement(pages, n, frames);

    // Free the dynamically allocated memory for pages
    free(pages);

    return 0;
}

•	Write a C program to implement the Priority(premptive) Scheduling Algorithm.

#include <stdio.h>
#include <stdbool.h>

typedef struct {
    int pid;       // Process ID
    int burstTime; // Burst Time
    int arrivalTime; // Arrival Time
    int priority;  // Priority
    int remainingTime; // Remaining Burst Time
    int completionTime; // Completion Time
    int turnAroundTime; // Turnaround Time
    int waitingTime;    // Waiting Time
} Process;

void calculateTimes(Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    bool isProcessRunning = false;

    while (completed != n) {
        int highestPriorityIndex = -1;

        // Find the process with the highest priority that has arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
                if (highestPriorityIndex == -1 || processes[i].priority < processes[highestPriorityIndex].priority) {
                    highestPriorityIndex = i;
                }
            }
        }

        if (highestPriorityIndex != -1) {
            isProcessRunning = true;

            // Execute the process with the highest priority for one time unit
            processes[highestPriorityIndex].remainingTime--;
            currentTime++;

            // If the process is completed
            if (processes[highestPriorityIndex].remainingTime == 0) {
                completed++;
                processes[highestPriorityIndex].completionTime = currentTime;
                processes[highestPriorityIndex].turnAroundTime = processes[highestPriorityIndex].completionTime - processes[highestPriorityIndex].arrivalTime;
                processes[highestPriorityIndex].waitingTime = processes[highestPriorityIndex].turnAroundTime - processes[highestPriorityIndex].burstTime;
            }
        } else {
            // If no process is ready, move the time forward
            currentTime++;
        }
    }
}

void displayResults(Process processes[], int n) {
    float totalTurnAroundTime = 0, totalWaitingTime = 0;

    printf("\nProcess\tArrival\tBurst\tPriority\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        totalTurnAroundTime += processes[i].turnAroundTime;
        totalWaitingTime += processes[i].waitingTime;

        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid,
               processes[i].arrivalTime,
               processes[i].burstTime,
               processes[i].priority,
               processes[i].completionTime,
               processes[i].turnAroundTime,
               processes[i].waitingTime);
    }

    printf("\nAverage Turnaround Time: %.2f", totalTurnAroundTime / n);
    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
}

int main() {
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;

        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);

        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);

        printf("Enter priority for Process %d (lower value = higher priority): ", i + 1);
        scanf("%d", &processes[i].priority);

        // Initialize remaining time to burst time
        processes[i].remainingTime = processes[i].burstTime;
    }

    // Calculate times for each process
    calculateTimes(processes, n);

    // Display the results
    displayResults(processes, n);

    return 0;
}

